@startuml architecture_diagram

title PC Inventory System - Architecture v2.1

skinparam componentStyle rectangle
skinparam rectangleFontSize 10
skinparam noteFontSize 9

' Client Side
package "Client Side (Each PC)" {
    rectangle "pc-inventory-client.exe" as Client #LightBlue {
        rectangle "main.rs\n====\nエントリーポイント\n・設定ファイル読み込み\n・ログ初期化\n・起動時処理実行\n・定期タイマー起動\n・リトライ管理" as ClientMain

        rectangle "config.rs\n====\n設定管理\n・TOML読み書き\n・サーバーURL\n・送信間隔(6h)\n・リトライ設定\n・PC情報保持" as ClientConfig

        rectangle "wmi/collector.rs\n====\nWMI情報収集\n・UUID取得\n・機種名取得\n・OS情報取得" as WMI

        rectangle "network/detector.rs\n====\nネットワーク検出\n・IPアドレス取得\n・MACアドレス取得\n・種別判定(有線/無線)" as Network

        rectangle "api/client.rs\n====\nAPI通信\n・POST /api/pc-info\n・JSON送受信\n・タイムアウト30秒" as ApiClient

        rectangle "logging.rs\n====\nログ出力\n・tracing-subscriber\n・ファイルローテーション\n・client.log" as ClientLog

        ClientMain --> ClientConfig
        ClientMain --> ClientLog
        ClientMain --> WMI
        ClientMain --> Network
        ClientMain --> ApiClient
    }

    file "config.toml\n====\n設定ファイル\n・サーバーURL\n・送信間隔\n・使用者名\n・自動更新項目" as ClientConfigFile

    file "client.log" as ClientLogFile

    Client --> ClientConfigFile : Read/Write
    Client --> ClientLogFile : Write
}

' Server Side
package "Server Side (Single Host)" {
    rectangle "pc-inventory-server.exe" as Server #LightCoral {
        rectangle "main.rs\n====\nサーバーエントリーポイント\n・設定読み込み\n・DBプール作成\n・Axumルーター構築\n・0.0.0.0:8080起動" as ServerMain

        rectangle "config.rs\n====\nサーバー設定\n・DB接続URL\n・ポート設定\n・接続プール設定\n・ログレベル" as ServerConfig

        rectangle "Router\n====\nHTTPルーティング\n・POST /api/pc-info\n・TraceLayerミドルウェア\n・State共有" as Router

        rectangle "handlers/pc_info.rs\n====\nAPIハンドラー\n・リクエストパース\n・バリデーション\n・upsert呼び出し\n・レスポンス生成" as Handler

        rectangle "db/repository.rs\n====\nリポジトリ\n・find_by_uuid()\n・create()\n・update()\n・upsert()" as Repository

        rectangle "models/pc_info.rs\n====\nデータモデル\n・PcInfo\n・PcInfoRequest\n・PcInfoResponse\n・ErrorResponse" as Model

        rectangle "logging.rs\n====\nログ出力\n・tracing設定\n・server.log" as ServerLog

        ServerMain --> ServerConfig
        ServerMain --> ServerLog
        ServerMain --> Repository
        ServerMain --> Router
        Router --> Handler
        Handler --> Repository
        Handler --> Model
        Repository --> Model
    }

    file "config.toml\n====\n設定ファイル\n・DB接続情報\n・サーバーポート\n・接続プール設定" as ServerConfigFile

    file "server.log" as ServerLogFile

    Server --> ServerConfigFile : Read
    Server --> ServerLogFile : Write
}

' Database
database "MySQL/MariaDB" as DB #LightYellow {
    rectangle "pc_inventory\n====\npc_infoテーブル\n・id (PK)\n・uuid (UNIQUE)\n・mac_address\n・network_type\n・user_name\n・ip_address\n・os, os_version\n・model_name\n・created_at\n・updated_at" as DBTable
}

' Communication
Client --> Server : HTTP POST\n/api/pc-info\n(JSON)
Server --> DB : SQL UPSERT

' Data Reference
actor Administrator
Administrator --> DB : SELECT query\n(Excel/Workbench)

' Additional Notes
note bottom of Client
  **起動時処理**
  1. WMI情報収集 (UUID, OS, Model)
  2. ネットワーク検出 (IP, MAC, Type)
  3. 設定ファイル更新
  4. サーバーへ送信

  **定期送信**
  6時間ごとにチェック

  **リトライサイクル**
  送信失敗時:
  15分後 → 1時間後 → 繰り返し
end note

note bottom of Server
  **UPSERT処理**
  1. SELECT * WHERE uuid = ?
  2. 存在しない → INSERT
     (created_at, updated_at = NOW())
  3. 存在する → UPDATE
     (updated_at = NOW())

  **エラーハンドリング**
  ・400 Bad Request: バリデーションエラー
  ・500 Internal Server Error: DBエラー
end note

note bottom of DB
  **UNIQUE制約**
  uuidフィールドで一意性保証
  → 同じPCは1レコードのみ

  **インデックス**
  ・idx_uuid (uuid)
  ・idx_updated_at (updated_at)
end note

@enduml
